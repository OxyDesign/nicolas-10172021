{"version":3,"sources":["utils/functions.ts","components/OrderRow.tsx","components/OrdersTable.tsx","components/Button.tsx","data/OrderBookWebSocket.ts","components/OrderBook.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getSubscriptionMessage","isSubscribe","product","JSON","stringify","event","feed","product_ids","sortOrdersByAsc","orders","sort","orderA","orderB","computeOrdersTotal","total","map","order","updateOrders","deltas","newOrders","orderIndex","deltaIndex","length","delta","push","slice","filter","formatNumberForDisplay","value","decimal","toFixed","split","integerPart","decimalPart","i","reduceRight","number","digit","newNumber","join","OrderRow","max","price","size","totalPercentage","style","backgroundSize","className","OrdersTable","type","Button","children","onClick","OrderBookWebSocket","onConnect","url","socket","onData","asks","bids","interval","close","subscribe","frequency","isConnected","send","window","setInterval","sendData","unsubscribe","clearInterval","readyState","this","W3CWebSocket","onopen","onmessage","e","data","parse","sortedAsks","sortedBids","OrderBook","useState","ws","setWs","isLoading","setIsLoading","isPaused","setIsPaused","setProduct","setData","spread","Math","abs","spreadPercentage","loadingMessage","websocket","loadingFunction","setTimeout","reverse","useEffect","newWebsocket","onBlur","addEventListener","removeEventListener","spreadElt","prevProduct","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47e4e7d4.chunk.js","sourcesContent":["/**\n * Generate the message needed to subscribe/unsubscribe to the WebSocket data\n * @param {boolean} isSubscribe - Select Subscribe or Unscribe type of Message\n * @param {string} product - Product ID\n * @return {string} Stringified Message to send to the WebSocket\n */\nexport const getSubscriptionMessage: Function = (\n  isSubscribe: boolean,\n  product: string\n): string => JSON.stringify({\n  event: isSubscribe ? 'subscribe' : 'unsubscribe',\n  feed: 'book_ui_1',\n  product_ids:[`PI_${ product }USD`]\n});\n\n/**\n * Sort Orders by Ascending Value\n * @param {Array} orders - Orders to sort\n * @return {Array} Sorted orders\n */\nexport const sortOrdersByAsc: Function = (orders: Orders): Orders => {\n  return orders.sort((orderA: Order, orderB: Order) => orderA[0] - orderB[0]);\n};\n\n/**\n * Compute & Add Total Orders\n * @param {Array} orders - Orders to compute\n * @return {Array} Orders with Totals\n */\nexport const computeOrdersTotal: Function = (orders: Orders): TotalOrders => {\n  let total: number = 0;\n  return orders.map(order => [...order, total += order[1]]);\n};\n\n/**\n * Update existing orders\n * @param {Array} orders - Orders to update\n * @param {Array} deltas - New Deltas to add/remove/update in Orders\n * @return {Array} Updated Orders\n */\nexport const updateOrders: Function = (orders: Orders, deltas: Orders): Orders => {\n  const newOrders: Orders = [];\n  let orderIndex: number = 0;\n  let deltaIndex: number = 0;\n\n  // Orders & Deltas are processed in order until one runs out\n  while (orderIndex < orders.length && deltaIndex < deltas.length) {\n    const order: Order = orders[orderIndex];\n    const delta: Order = deltas[deltaIndex];\n\n    if (delta[0] < order[0]) {\n      // Current Delta lower than current Order, Delta added (if not 0 size)\n      if (delta[1] !== 0) {\n        newOrders.push(delta);\n      }\n      // Then move forward, to next Delta\n      deltaIndex++;\n    } else if (delta[0] > order[0]) {\n      // Current Delta higher than current Order, Order added\n      newOrders.push(order);\n      // Then move forward, to next Order\n      orderIndex++;\n    } else {\n      // Current Delta & Current Order at same value, only the delta is kept\n      // If not size 0\n      if (delta[1] !== 0) {\n        newOrders.push(delta);\n      }\n      // Then move forward, to next Order & Delta\n      deltaIndex++;\n      orderIndex++;\n    }\n  }\n\n  if (orderIndex < orders.length) {\n    // If there are remaining orders, they are added\n    newOrders.push(...orders.slice(orderIndex));\n  } else if (deltaIndex < deltas.length) {\n    // If there are remaining deltas, the non 0 size ones are added\n    newOrders.push(...deltas.slice(deltaIndex).filter(delta => delta[1] !== 0));\n  }\n\n  return newOrders;\n};\n\n/**\n * Format Number For Display\n * @param {number} value - Number to format\n * @param {number} decimal - Decimals to include\n * @return {string} Formatted Number\n */\nexport const formatNumberForDisplay: Function = (value: number, decimal: number = 0): String => {\n  let [integerPart, decimalPart] = value.toFixed(decimal).split('.');\n  let i = 0;\n\n  integerPart = integerPart.split('').reduceRight((number, digit) => {\n    const newNumber = digit + (i && i % 3 === 0 ? ',' : '') + number;\n    i++;\n    return newNumber;\n  }, '');\n\n  return decimal ? [integerPart, decimalPart].join('.') : integerPart;\n}\n","import { formatNumberForDisplay } from '../utils/functions';\n\ntype OrderRowProps = {\n  order: TotalOrder;\n  max: number;\n};\n\nfunction OrderRow({ order, max }: OrderRowProps) {\n  // Get price, size, total from the order\n  const [price, size, total] = order;\n  // Use max prop and total to calculate % for background size to render\n  const totalPercentage = max ? (total * 100) / max : 0;\n\n  // Use the formatting util to display each number as expected\n  return <tr style={ {\n    backgroundSize: `${ totalPercentage }% 100%`\n  } }>\n    <td className=\"price\">{ formatNumberForDisplay(price, 2) }</td>\n    <td>{ formatNumberForDisplay(size) }</td>\n    <td>{ formatNumberForDisplay(total) }</td>\n  </tr>;\n}\n\nexport default OrderRow;\n","import OrderRow from './OrderRow';\n\ntype OrdersTableProps = {\n  type: 'ask' | 'bid';\n  orders: TotalOrders;\n};\n\nfunction OrdersTable({ type, orders }: OrdersTableProps) {\n  // Get max to pass to the rows to compute background size %\n  const max = orders.length ? orders[orders.length - 1][2] : 0;\n\n  return <table\n    className={ `orders-table ${ type }` }\n  >\n    <thead>\n      <tr>\n        <th>Price</th>\n        <th>Size</th>\n        <th>Total</th>\n      </tr>\n    </thead>\n    <tbody>\n      { orders.map((order, i) => <OrderRow\n        key={ i }\n        order={ order }\n        max={ max }\n      />) }\n    </tbody>\n  </table>;\n}\n\nexport default OrdersTable;\n","import { ReactNode } from 'react';\n\ntype ButtonProps = {\n  onClick: Function;\n  children: ReactNode;\n};\n\nfunction Button({ children, onClick = () => {} }: ButtonProps) {\n  return (<button className=\"primary-button\" onClick={ () => {\n    onClick();\n  } }>\n    { children }\n  </button>);\n}\n\nexport default Button;\n","import { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport {\n  getSubscriptionMessage,\n  sortOrdersByAsc,\n  updateOrders\n} from '../utils/functions';\n\ninterface WebsocketInterface {\n  constructor: Function;\n  close: Function;\n  subscribe: Function;\n  unsubscribe: Function;\n  isConnected: Function;\n}\n\nclass OrderBookWebSocket implements WebsocketInterface {\n  // URL to connect\n  readonly url: string = 'wss://www.cryptofacilities.com/ws/v1';\n  // Store the websocket instance\n  private socket: W3CWebSocket;\n  // Function called at regular interval, for the component to update\n  private onData: Function = () => {};\n  // Processed Asks orders\n  private asks: Orders;\n  // Processed Bids orders\n  private bids: Orders;\n  // Product ID (XBT / ETH)\n  private product: string;\n  // Interval to send Data (asks + bids)\n  private interval: number = 0;\n\n  // Constructor\n  public constructor({ onConnect }: { onConnect: Function }) {\n    // Initialize properties\n    this.product = '';\n    this.asks = [];\n    this.bids = [];\n    // Instantiate the WebSocket\n    this.socket = new W3CWebSocket(this.url);\n\n    // On Open, execute onConnect callback\n    this.socket.onopen = function() {\n      onConnect();\n    };\n\n    // On Message, process the data\n    this.socket.onmessage = (e) => {\n      const { data = '' } = e;\n      const {\n        event = '',\n        feed = '',\n        asks = [],\n        bids = []\n      } = JSON.parse(data as string);\n\n      // When no data, there is nothing to process\n      if (event === 'info' || event === 'subscribed') {\n        return;\n      }\n\n      // Asks and Bids are sorted by ascending price\n      // Could be removed to improve performance if we are guaranteed they\n      // always come already sorted.\n      const sortedAsks = sortOrdersByAsc(asks);\n      const sortedBids = sortOrdersByAsc(bids);\n\n      if (feed === 'book_ui_1_snapshot') {\n        // If it's a snapshot, store the values and send them right away\n        this.asks = sortedAsks;\n        this.bids = sortedBids;\n\n        this.sendData();\n      } else if (feed === 'book_ui_1') {\n        // If it's a delta, update existing orders accordingly\n        if (sortedAsks.length) {\n          this.asks = updateOrders(this.asks, sortedAsks);\n        }\n        if (sortedBids.length) {\n          this.bids = updateOrders(this.bids, sortedBids);\n        }\n      };\n    };\n  };\n\n  // Public Close method\n  public close = () => {\n    this.socket.close();\n  };\n\n  // Public Subscribe method\n  public subscribe = ({ product, frequency, onData }: { product: string, frequency: number, onData: Function }) => {\n    // On subscribe request, product ID and onData callback are saved\n    this.product = product;\n    this.onData = onData;\n\n    if (this.isConnected()) {\n      // Send the formatted message to subscribe (including product ID)\n      this.socket.send(getSubscriptionMessage(true, this.product));\n      // Start the interval to send Data, based on frequency provided\n      this.interval = window.setInterval(() => {\n        this.sendData();\n      }, frequency);\n    }\n  };\n\n  // Public Unsubscribe method\n  public unsubscribe = ({ product }: { product: string }) => {\n    // Reset properties\n    this.asks = [];\n    this.bids = [];\n    this.product = '';\n    this.onData = () => {};\n\n    if (this.interval) {\n      // Clear the existing interval to send Data\n      clearInterval(this.interval);\n    }\n\n    if (this.isConnected()) {\n      // Send the formatted message to unsubscribe (including product ID)\n      this.socket.send(getSubscriptionMessage(false, product));\n    }\n  };\n\n  // Private Send Data method - Called on a regular interval set by the component\n  private sendData = () => {\n    // Send asks and bids processed / sorted orders\n    if (this.onData) this.onData({\n      asks: this.asks.slice(),\n      bids: this.bids.slice()\n    });\n  };\n\n  // Public isConnected method\n  public isConnected = (): boolean => {\n    return this.socket.readyState === 1;\n  };\n};\n\nexport default OrderBookWebSocket;\n","import { useState, useEffect } from 'react';\n\nimport {\n  computeOrdersTotal,\n  formatNumberForDisplay\n} from '../utils/functions';\n\nimport OrdersTable from './OrdersTable';\nimport Button from './Button';\n\nimport OrderBookWebSocket from '../data/OrderBookWebSocket';\n\nfunction OrderBook() {\n  // Frequency to update the Order tables\n  const frequency: number = 500;\n  // Websocket instance\n  const [ws, setWs]: [any, Function] = useState(null);\n  // When is loading, show overlayer with Loading message\n  const [isLoading, setIsLoading]: [boolean, Function] = useState(true);\n  // When is paused, show overlayer with Paused message + Button to reconnect\n  const [isPaused, setIsPaused]: [boolean, Function] = useState(false);\n  // Product ID (XBT or ETH)\n  const [product, setProduct]: [string, Function] = useState('');\n  // Asks and Bids data\n  const [data, setData]: [{asks: TotalOrders, bids: TotalOrders}, Function] = useState({asks: [], bids: []});\n  // Spread value\n  const spread: number = (data.asks.length && data.bids.length) ? Math.abs(data.asks[0][0] - data.bids[0][0]) : 0;\n  // Spread percentage\n  const spreadPercentage: number = spread > 0 ? (spread * 100 / data.asks[0][0]) : 0;\n  // Message string for Pause / Loading\n  const loadingMessage = isPaused ? 'Paused' : 'Loading...';\n\n  // Subscribe / resubscribe, reset loading state function (pause / load)\n  const subscribe = (websocket: OrderBookWebSocket, loadingFunction: Function) => {\n    setTimeout(() => loadingFunction(false), 200);\n    websocket.subscribe({\n      product,\n      frequency,\n      onData: ({ asks, bids }: {asks: [], bids: []}): void => {\n        setData({\n          asks: computeOrdersTotal(asks),\n          bids: computeOrdersTotal(bids.reverse())\n        });\n      }\n    });\n  };\n\n  // Unsubscribe, set loading state function (pause / load)\n  const unsubscribe = (websocket: OrderBookWebSocket, loadingFunction: Function) => {\n    loadingFunction(true);\n    websocket.unsubscribe({ product });\n  };\n\n  useEffect(() => {\n    // On component 1st render, intialize the WebSocket\n    const newWebsocket = new OrderBookWebSocket({\n      onConnect: (): void => {\n        // Set the initial product\n        setProduct('XBT');\n      }\n    });\n\n    setWs(newWebsocket);\n\n    // On Blur, pause the WS subscription (unsubscribe)\n    // Will resubscribe when the user clicks the 'Reconnect' button\n    const onBlur = () => unsubscribe(newWebsocket, setIsPaused);\n    window.addEventListener('blur', onBlur);\n\n    return () => {\n      // Remove listener and close the WS when unmount\n      window.removeEventListener('blur', onBlur);\n      newWebsocket.close();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!product || !ws) return;\n    // When WS and Product are set, subscribe\n\n    subscribe(ws, setIsLoading);\n\n    return () => {\n      // Unsubscribe when product change\n      unsubscribe(ws, setIsLoading);\n    };\n  }, [product, ws]);\n\n  const spreadElt = <h2 className=\"ob-spread\">\n    Spread:&nbsp;<span className=\"number\">{ formatNumberForDisplay(spread, 1) }</span>&nbsp;(<span className=\"number\">{ formatNumberForDisplay(spreadPercentage, 2) }</span>%)\n  </h2>;\n\n  return (\n    <section className=\"ob\">\n      <div className=\"ob-title-container\">\n        <h1 className=\"ob-title\">\n          Order Book\n        </h1>\n        { spreadElt }\n      </div>\n      <div className=\"ob-tables-container\">\n        <OrdersTable\n          type=\"ask\"\n          orders={ data.asks }\n        />\n        { spreadElt }\n        <OrdersTable\n          type=\"bid\"\n          orders={ data.bids }\n        />\n      </div>\n      <div className=\"ob-footer\">\n        <Button onClick={ () => {\n          setProduct((prevProduct: string) => prevProduct === 'XBT' ? 'ETH' : 'XBT');\n        } }>\n          Toggle Feed\n        </Button>\n      </div>\n      <div className={ `ob-loader ${ (isLoading || isPaused) ? 'visible' : '' }` }>\n        <span>{ loadingMessage }</span>\n        { isPaused && <Button onClick={ () => subscribe(ws, setIsPaused) }>\n          Reconnect\n        </Button> }\n      </div>\n    </section>\n  );\n}\n\nexport default OrderBook;\n","import OrderBook from './components/OrderBook';\n\nimport 'reset-css';\nimport './style/app.scss';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <OrderBook />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}